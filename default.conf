server {
    listen       80;
    server_name  localhost;

    location / {
        root   /usr/share/angie/html;
        index  index.html index.htm;
    }

    location /status/ {
        api     /status/;
        allow   127.0.0.1;
        deny    all;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/angie/html;
    }
    location =  /baz {
        default_type text/html;
        add_header X-Foo $foo;
        js_content http.baz;
    }

    location = /summary {
        default_type text/html;
        return 200 $summary;
    }

    location = /hello {
        default_type text/html;
        js_content http.hello;
    }
    location /test {
      default_type text/html;
      content_by_lua_block  {
         local regex = [=[[0-9]+]=]
         local m = ngx.re.match("hello, 1234", regex)
         if m then ngx.say(m[0]) else ngx.say("not matched!") end
      }
    }
    location /demo {
        default_type text/html;
        content_by_lua_block {
            local cjson = require("cjson")
            local hashids = require("hashids");
            local h = hashids.new("this is my salt")
            local hash = h:encode(1337)
            local conf = {
                name = "dalong",
                age =333,
                id = hash,
            }
            ngx.say(cjson.encode(conf))
        }   
    }

    location = /luapath {
        default_type text/html;
        content_by_lua_block {
            local cjson = require("cjson")
            local info = {
             path =  package.path,
             cpath= package.cpath
            }
            ngx.say(cjson.encode(info))
        }
    }
    location = /http {
        default_type text/html;
        content_by_lua_block {
            local httpc = require("resty.http").new()
            -- Single-shot requests use the `request_uri` interface.
            local res, err = httpc:request_uri("http://192.168.254.241:8080/app.json", {
                method = "GET"
            })
            if not res then
                ngx.log(ngx.ERR, "request failed: ", err)
                return
            end

            -- At this point, the entire request / response is complete and the connection
            -- will be closed or back on the connection pool.

            -- The `res` table contains the expeected `status`, `headers` and `body` fields.
            local status = res.status
            local length = res.headers["Content-Length"]
            local body   = res.body
            ngx.say(body)
        }
    }
}